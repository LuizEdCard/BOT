#!/usr/bin/env python3
"""
Teste do DCA Inteligente - Gatilho de Dupla-Condi√ß√£o
====================================================

Valida que o bot s√≥ compra quando:
1. O degrau est√° ativo (queda suficiente desde SMA)
2. O pre√ßo atual melhora o pre√ßo m√©dio em pelo menos X%

Autor: Sistema de Trading ADA/USDT
Data: 15/10/2025
"""

from decimal import Decimal

print("‚ïê" * 70)
print("‚ïë     TESTE: DCA Inteligente - Dupla-Condi√ß√£o                    ‚ïë")
print("‚ïê" * 70)
print()

# Par√¢metros de teste
PERCENTUAL_MINIMO_MELHORA_PM = Decimal('2.0')  # 2% de melhora m√≠nima

print(f"üìä Configura√ß√£o: percentual_minimo_melhora_pm = {PERCENTUAL_MINIMO_MELHORA_PM}%")
print()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Teste 1: Bot sem posi√ß√£o (primeira compra) - deve permitir
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
print("üìã Teste 1: Bot SEM posi√ß√£o (primeira compra)")
print("-" * 70)

preco_medio_compra = None  # Sem posi√ß√£o
preco_atual = Decimal('0.8000')
queda_pct = Decimal('5.0')  # Degrau 3 ativo (5.5%)

# Condi√ß√£o 1: SMA
condicao_sma_ok = queda_pct >= Decimal('1.5')  # Degrau 1

# Condi√ß√£o 2: Melhora do PM (sempre True se n√£o tem posi√ß√£o)
condicao_melhora_pm_ok = True

print(f"Pre√ßo m√©dio: {preco_medio_compra}")
print(f"Pre√ßo atual: ${preco_atual:.4f}")
print(f"Queda desde SMA: {queda_pct:.2f}%")
print()
print(f"‚úÖ Condi√ß√£o 1 (SMA): {condicao_sma_ok}")
print(f"‚úÖ Condi√ß√£o 2 (PM): {condicao_melhora_pm_ok}")
print()

if condicao_sma_ok and condicao_melhora_pm_ok:
    print("‚úÖ APROVADO: Bot pode comprar (primeira compra)")
else:
    print("‚ùå BLOQUEADO: Bot n√£o pode comprar")

print()
print("=" * 70)
print()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Teste 2: Bot com posi√ß√£o, pre√ßo melhora suficiente - deve permitir
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
print("üìã Teste 2: Bot COM posi√ß√£o, pre√ßo MELHORA suficiente")
print("-" * 70)

preco_medio_compra = Decimal('0.8500')  # PM atual
preco_atual = Decimal('0.8250')  # 2.94% menor que PM
queda_pct = Decimal('3.0')  # Degrau 2 ativo

# Condi√ß√£o 1: SMA
condicao_sma_ok = queda_pct >= Decimal('3.0')  # Degrau 2

# Condi√ß√£o 2: Melhora do PM
percentual_melhora = PERCENTUAL_MINIMO_MELHORA_PM / Decimal('100')
limite_preco_melhora = preco_medio_compra * (Decimal('1') - percentual_melhora)
condicao_melhora_pm_ok = preco_atual <= limite_preco_melhora

print(f"Pre√ßo m√©dio: ${preco_medio_compra:.4f}")
print(f"Pre√ßo atual: ${preco_atual:.4f}")
print(f"Limite para melhora ({PERCENTUAL_MINIMO_MELHORA_PM}%): ${limite_preco_melhora:.4f}")
print(f"Queda desde SMA: {queda_pct:.2f}%")
print()

melhora_real = ((preco_medio_compra - preco_atual) / preco_medio_compra) * Decimal('100')
print(f"Melhora real: {melhora_real:.2f}% (precisa >= {PERCENTUAL_MINIMO_MELHORA_PM}%)")
print()

print(f"‚úÖ Condi√ß√£o 1 (SMA): {condicao_sma_ok}")
print(f"‚úÖ Condi√ß√£o 2 (PM): {condicao_melhora_pm_ok}")
print()

if condicao_sma_ok and condicao_melhora_pm_ok:
    print(f"‚úÖ APROVADO: Bot pode comprar (pre√ßo melhora PM em {melhora_real:.2f}%)")
else:
    print("‚ùå BLOQUEADO: Bot n√£o pode comprar")

print()
print("=" * 70)
print()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Teste 3: Bot com posi√ß√£o, pre√ßo N√ÉO melhora suficiente - deve bloquear
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
print("üìã Teste 3: Bot COM posi√ß√£o, pre√ßo N√ÉO melhora suficiente")
print("-" * 70)

preco_medio_compra = Decimal('0.8500')  # PM atual
preco_atual = Decimal('0.8400')  # Apenas 1.18% menor que PM
queda_pct = Decimal('3.0')  # Degrau 2 ativo

# Condi√ß√£o 1: SMA
condicao_sma_ok = queda_pct >= Decimal('3.0')  # Degrau 2

# Condi√ß√£o 2: Melhora do PM
percentual_melhora = PERCENTUAL_MINIMO_MELHORA_PM / Decimal('100')
limite_preco_melhora = preco_medio_compra * (Decimal('1') - percentual_melhora)
condicao_melhora_pm_ok = preco_atual <= limite_preco_melhora

print(f"Pre√ßo m√©dio: ${preco_medio_compra:.4f}")
print(f"Pre√ßo atual: ${preco_atual:.4f}")
print(f"Limite para melhora ({PERCENTUAL_MINIMO_MELHORA_PM}%): ${limite_preco_melhora:.4f}")
print(f"Queda desde SMA: {queda_pct:.2f}%")
print()

melhora_real = ((preco_medio_compra - preco_atual) / preco_medio_compra) * Decimal('100')
print(f"Melhora real: {melhora_real:.2f}% (precisa >= {PERCENTUAL_MINIMO_MELHORA_PM}%)")
print()

print(f"‚úÖ Condi√ß√£o 1 (SMA): {condicao_sma_ok}")
print(f"‚ùå Condi√ß√£o 2 (PM): {condicao_melhora_pm_ok}")
print()

if condicao_sma_ok and condicao_melhora_pm_ok:
    print(f"‚úÖ APROVADO: Bot pode comprar (pre√ßo melhora PM em {melhora_real:.2f}%)")
else:
    print(f"‚ùå BLOQUEADO: Bot N√ÉO pode comprar")
    print(f"   Motivo: Pre√ßo atual ${preco_atual:.4f} n√£o melhora PM (${preco_medio_compra:.4f}) em {PERCENTUAL_MINIMO_MELHORA_PM}%")
    print(f"   O pre√ßo precisa cair para ${limite_preco_melhora:.4f} ou menos")

print()
print("=" * 70)
print()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Teste 4: Simula√ß√£o completa com m√∫ltiplas compras
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
print("üìã Teste 4: Simula√ß√£o completa - M√∫ltiplas tentativas de compra")
print("-" * 70)

class SimuladorDCA:
    def __init__(self):
        self.preco_medio_compra = None
        self.quantidade_total = Decimal('0')
        self.valor_total_investido = Decimal('0')
        self.percentual_melhora = PERCENTUAL_MINIMO_MELHORA_PM

    def pode_comprar(self, preco_atual, queda_pct, degrau_min):
        # Condi√ß√£o 1: SMA
        condicao_sma_ok = queda_pct >= degrau_min

        # Condi√ß√£o 2: Melhora do PM
        condicao_melhora_pm_ok = True
        if self.preco_medio_compra is not None and self.preco_medio_compra > 0:
            percentual = self.percentual_melhora / Decimal('100')
            limite = self.preco_medio_compra * (Decimal('1') - percentual)
            condicao_melhora_pm_ok = preco_atual <= limite

        return condicao_sma_ok and condicao_melhora_pm_ok

    def executar_compra(self, quantidade, preco):
        valor_compra = quantidade * preco
        self.valor_total_investido += valor_compra
        self.quantidade_total += quantidade
        self.preco_medio_compra = self.valor_total_investido / self.quantidade_total

# Iniciar simula√ß√£o
bot = SimuladorDCA()

# Cen√°rio: Pre√ßo come√ßa em $0.90 e cai gradualmente
cenarios = [
    {"ciclo": 1, "preco": Decimal('0.9000'), "queda": Decimal('0.0'), "degrau": Decimal('1.5'), "desc": "Sem queda"},
    {"ciclo": 2, "preco": Decimal('0.8700'), "queda": Decimal('3.0'), "degrau": Decimal('3.0'), "desc": "Queda 3%"},
    {"ciclo": 3, "preco": Decimal('0.8650'), "queda": Decimal('3.5'), "degrau": Decimal('3.0'), "desc": "Queda 3.5% (tentativa repetida)"},
    {"ciclo": 4, "preco": Decimal('0.8450'), "queda": Decimal('5.5'), "degrau": Decimal('5.5'), "desc": "Queda 5.5%"},
    {"ciclo": 5, "preco": Decimal('0.8400'), "queda": Decimal('6.0'), "degrau": Decimal('5.5'), "desc": "Queda 6% (tentativa repetida)"},
]

for cenario in cenarios:
    print(f"\nCiclo {cenario['ciclo']}: {cenario['desc']}")
    print(f"   Pre√ßo: ${cenario['preco']:.4f} | Queda: {cenario['queda']:.1f}%")

    pode = bot.pode_comprar(cenario['preco'], cenario['queda'], cenario['degrau'])

    if pode:
        quantidade = Decimal('10')
        bot.executar_compra(quantidade, cenario['preco'])
        print(f"   ‚úÖ COMPRA EXECUTADA: {quantidade} ADA @ ${cenario['preco']:.4f}")
        print(f"   üìä Novo PM: ${bot.preco_medio_compra:.4f}")
    else:
        if bot.preco_medio_compra:
            print(f"   ‚ùå BLOQUEADO: Pre√ßo n√£o melhora PM (${bot.preco_medio_compra:.4f}) em {PERCENTUAL_MINIMO_MELHORA_PM}%")
        else:
            print(f"   ‚ùå BLOQUEADO: Degrau n√£o ativo")

print()
print("=" * 70)
print("üìä RESULTADO FINAL")
print("=" * 70)
print(f"Posi√ß√£o final: {bot.quantidade_total} ADA")
print(f"Pre√ßo m√©dio final: ${bot.preco_medio_compra:.4f}" if bot.preco_medio_compra else "Sem posi√ß√£o")
print(f"Total investido: ${bot.valor_total_investido:.2f}")
print()
print("‚úÖ DCA INTELIGENTE VALIDADO")
print("=" * 70)
print()
print("üìù BENEF√çCIOS")
print("-" * 70)
print("1. ‚úÖ Evita compras repetidas no mesmo pre√ßo")
print("2. ‚úÖ Garante que cada compra melhora o pre√ßo m√©dio significativamente")
print("3. ‚úÖ Uso mais eficiente do capital dispon√≠vel")
print("4. ‚úÖ Reduz risco de over-trading em quedas graduais")
print("=" * 70)
