#!/usr/bin/env python3
"""
Script de debug para rastrear fluxo de configura√ß√£o do Giro R√°pido
Simula as respostas do usu√°rio atrav√©s de stdin
"""

import sys
import subprocess
import json
from pathlib import Path

# Configura√ß√µes de teste
config_file = "configs/backtest_template.json"
csv_file = "dados/historicos/BINANCE_ADAUSDT_5m_2017-01-01_2025-10-25.csv"

# Simula√ß√µes de entrada (as respostas que o usu√°rio daria)
entrada_stdin = """estrategia_exemplo_giro_rapido.json
{csv_file}
5m
1000
0.1
giro_rapido
n
y
35.0
5m
1.0
0.5
2.5
50
y
""".format(csv_file=csv_file)

print("=" * 80)
print("üêõ DEBUG: Rastreando fluxo de configura√ß√£o do Giro R√°pido")
print("=" * 80)
print("\nSimulando entrada do usu√°rio...")
print(f"  Config: estrategia_exemplo_giro_rapido.json")
print(f"  CSV: {csv_file}")
print(f"  Timeframe: 5m")
print(f"  Saldo: 1000")
print(f"  Taxa: 0.1%")
print(f"  Estrat√©gia: giro_rapido")
print(f"  Aloca√ß√£o de Capital solicitada: 50%")
print()

# Executar backtest.py com stdin simulado
proc = subprocess.Popen(
    ["python", "backtest.py"],
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT,
    text=True,
    cwd="/home/cardoso/Documentos/BOT"
)

# Enviar entrada
stdout, _ = proc.communicate(input=entrada_stdin)

# Processar output
output_lines = stdout.split('\n')

# Procurar pelos debug statements
print("üìã Output de debug encontrado:")
print("-" * 80)

for i, line in enumerate(output_lines):
    # Procurar por linhas de debug
    if '[DEBUG]' in line or 'RESUMO' in line or 'Aloca√ß√£o' in line or 'TSL Gatilho' in line:
        print(line)
        # Imprimir pr√≥ximas 10 linhas se for RESUMO
        if 'RESUMO' in line:
            for j in range(i+1, min(i+15, len(output_lines))):
                print(output_lines[j])
            break

print("\n" + "=" * 80)
print("üîç An√°lise:")
print("=" * 80)

# Procurar pela aloca√ß√£o de capital no resumo
for i, line in enumerate(output_lines):
    if 'Aloca√ß√£o de Capital:' in line and 'Giro R√°pido' in output_lines[max(0, i-5):i][-1]:
        print(f"\n‚úÖ Encontrado: {line}")
        # Checar se √© 50% ou 20%
        if '50%' in line:
            print("‚úÖ Aloca√ß√£o CORRETA (50% conforme configurado)")
        elif '20%' in line:
            print("‚ùå Aloca√ß√£o INCORRETA (20% em vez de 50%)")
            print("   Problema: Par√¢metro n√£o foi aplicado!")
        break

print()
