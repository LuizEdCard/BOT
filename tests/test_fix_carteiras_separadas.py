#!/usr/bin/env python3
"""
Teste de Valida√ß√£o: Bug de Carteiras Separadas Corrigido
=========================================================

Este teste valida que a corre√ß√£o do bug cr√≠tico de valida√ß√£o de capital
entre carteiras est√° funcionando corretamente.

BUG ORIGINAL:
- A estrat√©gia Giro R√°pido estava validando capital na carteira 'acumulacao'
- Isso causava aprova√ß√£o incorreta de compras quando a carteira 'giro_rapido'
  n√£o tinha capital suficiente

CORRE√á√ÉO:
- strategy_dca.py agora passa explicitamente carteira='acumulacao'
- strategy_swing_trade.py j√° passava carteira='giro_rapido' corretamente
- gestao_capital.py j√° suportava o par√¢metro carteira
"""

import sys
from pathlib import Path
from decimal import Decimal

# Adicionar path do projeto
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.gestao_capital import GestaoCapital


def test_validacao_capital_carteiras_separadas():
    """
    Testa que a valida√ß√£o de capital respeita as carteiras separadas
    """
    print("=" * 80)
    print("üß™ TESTE: Valida√ß√£o de Capital por Carteira")
    print("=" * 80)
    
    # Cen√°rio:
    # - Saldo USDT total: 1000
    # - Reserva 8%: 80 USDT
    # - Saldo livre: 920 USDT
    # - Aloca√ß√£o Giro R√°pido: 20% = 184 USDT
    # - Aloca√ß√£o Acumula√ß√£o: 80% = 736 USDT
    
    gestao = GestaoCapital(
        saldo_usdt=Decimal('1000'),
        valor_posicao_ada=Decimal('0'),
        percentual_reserva=Decimal('8'),
        modo_simulacao=True
    )
    
    # Configurar aloca√ß√£o do giro r√°pido
    gestao.configurar_alocacao_giro_rapido(Decimal('20'))
    
    print("\nüìä Configura√ß√£o Inicial:")
    print(f"   Saldo USDT: $1000.00")
    print(f"   Reserva (8%): $80.00")
    print(f"   Saldo Livre: $920.00")
    print(f"   Aloca√ß√£o Giro R√°pido: 20% = $184.00")
    print(f"   Aloca√ß√£o Acumula√ß√£o: 80% = $736.00")
    
    # Teste 1: Acumula√ß√£o pode comprar dentro do seu limite
    print("\n" + "-" * 80)
    print("‚úÖ TESTE 1: Acumula√ß√£o comprando $500 (dentro do limite $736)")
    print("-" * 80)
    
    pode_comprar, motivo = gestao.pode_comprar(Decimal('500'), carteira='acumulacao')
    
    if pode_comprar:
        print(f"   ‚úÖ APROVADO: Acumula√ß√£o pode comprar $500.00")
    else:
        print(f"   ‚ùå BLOQUEADO: {motivo}")
        return False
    
    # Teste 2: Giro R√°pido N√ÉO pode comprar al√©m do seu limite
    print("\n" + "-" * 80)
    print("‚ùå TESTE 2: Giro R√°pido tentando comprar $500 (limite √© $184)")
    print("-" * 80)
    
    pode_comprar, motivo = gestao.pode_comprar(Decimal('500'), carteira='giro_rapido')
    
    if not pode_comprar:
        print(f"   ‚úÖ BLOQUEADO corretamente: {motivo}")
    else:
        print(f"   ‚ùå ERRO: Giro R√°pido N√ÉO deveria poder comprar $500!")
        return False
    
    # Teste 3: Giro R√°pido pode comprar dentro do seu limite
    print("\n" + "-" * 80)
    print("‚úÖ TESTE 3: Giro R√°pido comprando $150 (dentro do limite $184)")
    print("-" * 80)
    
    pode_comprar, motivo = gestao.pode_comprar(Decimal('150'), carteira='giro_rapido')
    
    if pode_comprar:
        print(f"   ‚úÖ APROVADO: Giro R√°pido pode comprar $150.00")
    else:
        print(f"   ‚ùå BLOQUEADO: {motivo}")
        return False
    
    # Teste 4: Acumula√ß√£o N√ÉO pode comprar al√©m do seu limite
    print("\n" + "-" * 80)
    print("‚ùå TESTE 4: Acumula√ß√£o tentando comprar $800 (limite √© $736)")
    print("-" * 80)
    
    pode_comprar, motivo = gestao.pode_comprar(Decimal('800'), carteira='acumulacao')
    
    if not pode_comprar:
        print(f"   ‚úÖ BLOQUEADO corretamente: {motivo}")
    else:
        print(f"   ‚ùå ERRO: Acumula√ß√£o N√ÉO deveria poder comprar $800!")
        return False
    
    # Teste 5: Verificar que ambas as carteiras respeitam a reserva global
    print("\n" + "-" * 80)
    print("üõ°Ô∏è TESTE 5: Nenhuma carteira pode violar reserva global de $80")
    print("-" * 80)
    
    # Simular que acumula√ß√£o j√° comprou $700
    gestao.atualizar_saldos(
        saldo_usdt=Decimal('300'),  # Restam $300 ap√≥s compra de $700
        valor_posicao_ada=Decimal('700'),
        carteira='acumulacao'
    )
    
    print(f"   Situa√ß√£o: Acumula√ß√£o comprou $700, restam $300 USDT")
    print(f"   Reserva obrigat√≥ria: $80 (8% de $1000)")
    print(f"   Capital livre: $220 ($300 - $80)")
    
    # Giro R√°pido tenta comprar $250 (mais que o saldo livre de $220)
    pode_comprar, motivo = gestao.pode_comprar(Decimal('250'), carteira='giro_rapido')
    
    if not pode_comprar:
        print(f"   ‚úÖ BLOQUEADO corretamente: {motivo}")
    else:
        print(f"   ‚ùå ERRO: Compra violaria reserva global!")
        return False
    
    print("\n" + "=" * 80)
    print("üéâ TODOS OS TESTES PASSARAM!")
    print("=" * 80)
    print("\n‚úÖ A valida√ß√£o de capital est√° respeitando carteiras separadas corretamente")
    print("‚úÖ Cada carteira tem seu pr√≥prio limite de capital dispon√≠vel")
    print("‚úÖ A reserva global de 8% √© respeitada por ambas as carteiras")
    print("‚úÖ Bug de valida√ß√£o de carteira errada foi CORRIGIDO!\n")
    
    return True


def test_resumo_carteiras():
    """
    Testa o resumo detalhado por carteira
    """
    print("\n" + "=" * 80)
    print("üß™ TESTE: Resumo Detalhado por Carteira")
    print("=" * 80)
    
    gestao = GestaoCapital(
        saldo_usdt=Decimal('1000'),
        valor_posicao_ada=Decimal('200'),  # Acumula√ß√£o
        percentual_reserva=Decimal('8'),
        modo_simulacao=True
    )
    
    # Adicionar posi√ß√£o na carteira giro_rapido
    gestao.atualizar_saldos(
        saldo_usdt=Decimal('1000'),
        valor_posicao_ada=Decimal('100'),
        carteira='giro_rapido'
    )
    
    # Configurar aloca√ß√£o
    gestao.configurar_alocacao_giro_rapido(Decimal('20'))
    
    # Obter resumo
    resumo = gestao.obter_resumo()
    
    print("\nüìä Resumo das Carteiras:")
    print(f"\n   üí∞ Capital Total: ${resumo['capital_total']:.2f}")
    print(f"   üõ°Ô∏è Reserva (8%): ${resumo['reserva_obrigatoria']:.2f}")
    
    print(f"\n   üìä ACUMULA√á√ÉO:")
    print(f"      Posi√ß√£o: ${resumo['carteiras']['acumulacao']['valor_posicao']:.2f}")
    print(f"      Dispon√≠vel: ${resumo['carteiras']['acumulacao']['capital_disponivel']:.2f}")
    
    print(f"\n   üí® GIRO R√ÅPIDO:")
    print(f"      Posi√ß√£o: ${resumo['carteiras']['giro_rapido']['valor_posicao']:.2f}")
    print(f"      Dispon√≠vel: ${resumo['carteiras']['giro_rapido']['capital_disponivel']:.2f}")
    print(f"      Aloca√ß√£o: {resumo['carteiras']['giro_rapido']['alocacao_pct']:.0f}%")
    
    # Valida√ß√µes
    assert resumo['carteiras']['acumulacao']['valor_posicao'] == Decimal('200')
    assert resumo['carteiras']['giro_rapido']['valor_posicao'] == Decimal('100')
    
    print("\n‚úÖ Resumo por carteira est√° correto!")
    
    return True


if __name__ == '__main__':
    print("\n" + "=" * 80)
    print("üî¨ SUITE DE TESTES: Valida√ß√£o de Carteiras Separadas")
    print("=" * 80)
    print("\nObjetivo: Validar corre√ß√£o do bug de valida√ß√£o de capital entre carteiras")
    print("\n" + "=" * 80 + "\n")
    
    try:
        # Executar testes
        sucesso = test_validacao_capital_carteiras_separadas()
        if sucesso:
            sucesso = test_resumo_carteiras()
        
        if sucesso:
            print("\n" + "=" * 80)
            print("üéâ SUITE DE TESTES CONCLU√çDA COM SUCESSO!")
            print("=" * 80)
            print("\n‚úÖ O bug de valida√ß√£o de carteira errada foi CORRIGIDO")
            print("‚úÖ Cada estrat√©gia agora valida capital na sua pr√≥pria carteira")
            print("‚úÖ DCA ‚Üí carteira='acumulacao'")
            print("‚úÖ Giro R√°pido ‚Üí carteira='giro_rapido'")
            print("\n" + "=" * 80 + "\n")
            sys.exit(0)
        else:
            print("\n‚ùå FALHA NOS TESTES!")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå ERRO durante execu√ß√£o dos testes: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
