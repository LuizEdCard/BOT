#!/usr/bin/env python3
"""
Strategy Swing Trade - Estrat√©gia de Giro R√°pido
Focada em capitalizar pequenas oscila√ß√µes de pre√ßo com prote√ß√£o de lucro
"""

from decimal import Decimal
from typing import Optional, Dict, Any
from pathlib import Path
import sys

# Adicionar path do projeto
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.core.position_manager import PositionManager
from src.core.gestao_capital import GestaoCapital


class StrategySwingTrade:
    """
    Estrat√©gia de Swing Trade (Giro R√°pido)

    Caracter√≠sticas:
    - Opera com capital separado da carteira de acumula√ß√£o
    - Compra em quedas de pre√ßo (gatilho_compra_pct)
    - Meta de lucro principal (meta_lucro_pct)
    - Prote√ß√£o de lucro parcial com trailing stop

    Regras:
    - Compra: Pre√ßo caiu X% de uma m√°xima recente
    - Venda: Lucro atingiu meta OU prote√ß√£o de lucro ativada
    - Prote√ß√£o: Se lucro >= ativacao_pct, vende se cair venda_reversao_pct
    """

    def __init__(
        self,
        config: Dict[str, Any],
        position_manager: PositionManager,
        gestao_capital: GestaoCapital,
        logger=None,
        notifier=None
    ):
        """
        Inicializa a estrat√©gia de swing trade

        Args:
            config: Configura√ß√£o completa do bot
            position_manager: Gerenciador de posi√ß√µes
            gestao_capital: Gerenciador de capital
            logger: Logger contextual (opcional)
            notifier: Inst√¢ncia do Notifier para notifica√ß√µes
        """
        # Logger contextual (fallback para logger global se n√£o fornecido)
        if logger:
            self.logger = logger
        else:
            from src.utils.logger import get_loggers
            self.logger, _ = get_loggers()

        self.config = config
        self.position_manager = position_manager
        self.gestao_capital = gestao_capital
        self.notifier = notifier

        # Configura√ß√£o da estrat√©gia
        self.estrategia_config = config.get('estrategia_giro_rapido', {})
        self.habilitado = self.estrategia_config.get('habilitado', False)

        if not self.habilitado:
            self.logger.info("üìà Estrat√©gia de Giro R√°pido DESABILITADA")
            return

        # Par√¢metros de aloca√ß√£o
        self.alocacao_capital_pct = Decimal(str(self.estrategia_config.get('alocacao_capital_pct', 20)))

        # Par√¢metros de compra
        self.gatilho_compra_pct = Decimal(str(self.estrategia_config.get('gatilho_compra_pct', 2.0)))

        # Par√¢metros de venda
        self.meta_lucro_pct = Decimal(str(self.estrategia_config.get('meta_lucro_pct', 3.5)))

        # Prote√ß√£o de lucro
        protecao = self.estrategia_config.get('protecao_lucro', {})
        self.protecao_ativacao_pct = Decimal(str(protecao.get('ativacao_pct', 2.0)))
        self.protecao_reversao_pct = Decimal(str(protecao.get('venda_reversao_pct', 0.5)))

        # Estado interno
        self.preco_referencia_maxima: Optional[Decimal] = None  # M√°xima recente para gatilho de compra
        self.ultima_compra_timestamp: Optional[float] = None  # Timestamp da √∫ltima compra para cooldown
        self.cooldown_segundos: int = 60  # Cooldown m√≠nimo entre compras (60 segundos)

        # Configurar aloca√ß√£o na gest√£o de capital
        self.gestao_capital.configurar_alocacao_giro_rapido(self.alocacao_capital_pct)

        self.logger.info("üìà Estrat√©gia de Giro R√°pido HABILITADA")
        self.logger.info(f"   Aloca√ß√£o: {self.alocacao_capital_pct}% do capital livre")
        self.logger.info(f"   Gatilho compra: queda de {self.gatilho_compra_pct}%")
        self.logger.info(f"   Meta lucro: {self.meta_lucro_pct}%")
        self.logger.info(f"   Prote√ß√£o: ativa em {self.protecao_ativacao_pct}%, vende se cair {self.protecao_reversao_pct}%")

    def verificar_oportunidade(self, preco_atual: Decimal) -> Optional[Dict[str, Any]]:
        """
        Verifica se existe oportunidade de trade (compra ou venda)

        Args:
            preco_atual: Pre√ßo atual do ativo

        Returns:
            Dict com dados da oportunidade ou None
        """
        if not self.habilitado:
            return None

        # Atualizar pre√ßo de refer√™ncia m√°xima
        self._atualizar_preco_referencia(preco_atual)

        # Verificar se j√° tem posi√ß√£o
        tem_posicao = self.position_manager.tem_posicao('giro_rapido')

        if not tem_posicao:
            # SEM POSI√á√ÉO: Verificar oportunidade de COMPRA
            return self._verificar_oportunidade_compra(preco_atual)
        else:
            # COM POSI√á√ÉO: Verificar oportunidade de VENDA
            return self._verificar_oportunidade_venda(preco_atual)

    def _atualizar_preco_referencia(self, preco_atual: Decimal):
        """
        Atualiza o pre√ßo de refer√™ncia m√°xima para detectar quedas

        Args:
            preco_atual: Pre√ßo atual do ativo
        """
        if self.preco_referencia_maxima is None or preco_atual > self.preco_referencia_maxima:
            self.preco_referencia_maxima = preco_atual
            self.logger.debug(f"üìä Pre√ßo refer√™ncia m√°xima atualizado: ${preco_atual:.6f}")

    def _verificar_oportunidade_compra(self, preco_atual: Decimal) -> Optional[Dict[str, Any]]:
        """
        Verifica oportunidade de compra quando N√ÉO h√° posi√ß√£o

        Args:
            preco_atual: Pre√ßo atual do ativo

        Returns:
            Dict com dados da oportunidade de compra ou None
        """
        if self.preco_referencia_maxima is None:
            return None

        # VERIFICAR COOLDOWN: Evitar m√∫ltiplas compras em sequ√™ncia r√°pida
        if self.ultima_compra_timestamp is not None:
            import time
            tempo_desde_ultima_compra = time.time() - self.ultima_compra_timestamp
            if tempo_desde_ultima_compra < self.cooldown_segundos:
                self.logger.debug(f"‚è±Ô∏è Cooldown ativo: {int(self.cooldown_segundos - tempo_desde_ultima_compra)}s restantes")
                return None

        # Calcular queda percentual desde a m√°xima
        queda_pct = ((self.preco_referencia_maxima - preco_atual) / self.preco_referencia_maxima) * Decimal('100')

        # Verificar se atingiu o gatilho de compra
        if queda_pct >= self.gatilho_compra_pct:
            # Calcular quanto comprar (100% do capital dispon√≠vel da carteira giro_rapido)
            capital_disponivel = self.gestao_capital.calcular_capital_disponivel('giro_rapido')

            if capital_disponivel <= 0:
                self.logger.debug("üìà Oportunidade de compra detectada, mas sem capital dispon√≠vel")
                return None

            # Verificar valor m√≠nimo de ordem
            valor_minimo = Decimal(str(self.config.get('VALOR_MINIMO_ORDEM', 5.0)))
            if capital_disponivel < valor_minimo:
                self.logger.debug(f"üìà Capital dispon√≠vel (${capital_disponivel:.2f}) abaixo do m√≠nimo (${valor_minimo:.2f})")
                return None

            # Validar com gest√£o de capital
            pode_comprar, motivo = self.gestao_capital.pode_comprar(capital_disponivel, 'giro_rapido')

            if not pode_comprar:
                self.logger.debug(f"üìà Compra bloqueada pela gest√£o de capital: {motivo}")
                if self.notifier:
                    titulo = "Compra Bloqueada (Giro R√°pido)"
                    mensagem = (
                        f"Oportunidade de compra para Giro R√°pido foi encontrada, mas n√£o executada.\n\n"
                        f"üîí **Bloqueio:** Gest√£o de Capital\n"
                        f"üìÑ **Motivo:** {motivo}"
                    )
                    # Para evitar spam, podemos adicionar um mecanismo de state com TTL aqui se necess√°rio
                    self.notifier.enviar_alerta(titulo, mensagem)
                return None

            quantidade = capital_disponivel / preco_atual

            self.logger.info(f"üéØ OPORTUNIDADE DE COMPRA (Giro R√°pido)")
            self.logger.info(f"   Queda: {queda_pct:.2f}% desde ${self.preco_referencia_maxima:.6f}")
            self.logger.info(f"   Pre√ßo atual: ${preco_atual:.6f}")
            self.logger.info(f"   Valor: ${capital_disponivel:.2f} ({quantidade:.4f} moedas)")

            return {
                'tipo': 'compra',
                'carteira': 'giro_rapido',
                'quantidade': quantidade,
                'preco_atual': preco_atual,
                'valor_operacao': capital_disponivel,
                'motivo': f'Queda de {queda_pct:.2f}% - Giro R√°pido',
                'queda_pct': queda_pct,
                'preco_referencia': self.preco_referencia_maxima
            }

        return None

    def _verificar_oportunidade_venda(self, preco_atual: Decimal) -> Optional[Dict[str, Any]]:
        """
        Verifica oportunidade de venda quando H√Å posi√ß√£o

        L√≥gica:
        1. Calcular lucro atual
        2. Atualizar high water mark
        3. Verificar meta principal de lucro
        4. Verificar prote√ß√£o de lucro (trailing stop)

        Args:
            preco_atual: Pre√ßo atual do ativo

        Returns:
            Dict com dados da oportunidade de venda ou None
        """
        # Calcular lucro atual
        lucro_atual = self.position_manager.calcular_lucro_atual(preco_atual, 'giro_rapido')

        if lucro_atual is None:
            self.logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel calcular lucro atual (giro r√°pido)")
            return None

        # Atualizar high water mark
        self.position_manager.atualizar_high_water_mark(lucro_atual, 'giro_rapido')
        high_water_mark = self.position_manager.get_high_water_mark('giro_rapido')

        self.logger.debug(f"üìä Giro R√°pido - Lucro: {lucro_atual:.2f}% | HWM: {high_water_mark:.2f}%")

        # 1. Verificar META PRINCIPAL de lucro
        if lucro_atual >= self.meta_lucro_pct:
            quantidade_total = self.position_manager.get_quantidade_total('giro_rapido')

            self.logger.info(f"üéØ META DE LUCRO ATINGIDA (Giro R√°pido)")
            self.logger.info(f"   Lucro atual: {lucro_atual:.2f}%")
            self.logger.info(f"   Meta: {self.meta_lucro_pct:.2f}%")
            self.logger.info(f"   Quantidade: {quantidade_total:.4f} moedas")

            return {
                'tipo': 'venda',
                'carteira': 'giro_rapido',
                'quantidade_venda': quantidade_total,
                'percentual_venda': 100,
                'preco_atual': preco_atual,
                'lucro_percentual': lucro_atual,
                'motivo': f'Meta de lucro atingida: {lucro_atual:.2f}% - Giro R√°pido',
                'tipo_venda': 'meta_lucro'
            }

        # 2. Verificar PROTE√á√ÉO DE LUCRO (trailing stop)
        if high_water_mark >= self.protecao_ativacao_pct:
            # Prote√ß√£o ativada - verificar se houve revers√£o
            gatilho_venda = high_water_mark - self.protecao_reversao_pct

            if lucro_atual <= gatilho_venda:
                quantidade_total = self.position_manager.get_quantidade_total('giro_rapido')

                self.logger.info(f"üõ°Ô∏è PROTE√á√ÉO DE LUCRO ATIVADA (Giro R√°pido)")
                self.logger.info(f"   High water mark: {high_water_mark:.2f}%")
                self.logger.info(f"   Lucro atual: {lucro_atual:.2f}%")
                self.logger.info(f"   Gatilho venda: {gatilho_venda:.2f}%")
                self.logger.info(f"   Revers√£o: {self.protecao_reversao_pct:.2f}%")

                return {
                    'tipo': 'venda',
                    'carteira': 'giro_rapido',
                    'quantidade_venda': quantidade_total,
                    'percentual_venda': 100,
                    'preco_atual': preco_atual,
                    'lucro_percentual': lucro_atual,
                    'motivo': f'Prote√ß√£o de lucro: revers√£o de {self.protecao_reversao_pct:.2f}% - Giro R√°pido',
                    'tipo_venda': 'protecao_lucro',
                    'high_water_mark': high_water_mark
                }

        return None

    def registrar_compra_executada(self, oportunidade: Dict[str, Any]):
        """
        Registra que uma compra foi executada

        Args:
            oportunidade: Dados da oportunidade que foi executada
        """
        import time

        # Resetar pre√ßo de refer√™ncia ap√≥s compra (nova base de c√°lculo)
        self.preco_referencia_maxima = oportunidade['preco_atual']

        # Registrar timestamp da compra para ativar cooldown
        self.ultima_compra_timestamp = time.time()

        self.logger.info(f"üìà Compra executada (Giro R√°pido) - Nova refer√™ncia: ${self.preco_referencia_maxima:.6f}")
        self.logger.info(f"‚è±Ô∏è Cooldown ativado: pr√≥xima compra permitida em {self.cooldown_segundos}s")

    def registrar_venda_executada(self, oportunidade: Dict[str, Any]):
        """
        Registra que uma venda foi executada

        Args:
            oportunidade: Dados da oportunidade que foi executada
        """
        # Ap√≥s venda, resetar estado
        self.preco_referencia_maxima = oportunidade['preco_atual']

        # Resetar cooldown ap√≥s venda (permitir nova compra imediatamente)
        self.ultima_compra_timestamp = None

        self.logger.info(f"üí∞ Venda executada (Giro R√°pido) - Ciclo completo. Lucro: {oportunidade.get('lucro_percentual', 0):.2f}%")
        self.logger.info(f"‚úÖ Cooldown resetado - nova compra permitida")

    def obter_estatisticas(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas da estrat√©gia

        Returns:
            Dict com estat√≠sticas
        """
        quantidade = self.position_manager.get_quantidade_total('giro_rapido')
        preco_medio = self.position_manager.get_preco_medio('giro_rapido')
        high_water_mark = self.position_manager.get_high_water_mark('giro_rapido')

        return {
            'estrategia': 'Giro R√°pido',
            'habilitada': self.habilitado,
            'quantidade_posicao': quantidade,
            'preco_medio': preco_medio,
            'alocacao_capital_pct': self.alocacao_capital_pct,
            'gatilho_compra_pct': self.gatilho_compra_pct,
            'meta_lucro_pct': self.meta_lucro_pct,
            'protecao_ativacao_pct': self.protecao_ativacao_pct,
            'protecao_reversao_pct': self.protecao_reversao_pct,
            'preco_referencia_maxima': self.preco_referencia_maxima,
            'high_water_mark': high_water_mark
        }


if __name__ == '__main__':
    """Teste b√°sico"""
    from src.persistencia.database import DatabaseManager

    # Configura√ß√£o de teste
    config_teste = {
        'DATABASE_PATH': 'dados/bot_trading.db',
        'BACKUP_DIR': 'dados/backup',
        'VALOR_MINIMO_ORDEM': 5.0,
        'estrategia_giro_rapido': {
            'habilitado': True,
            'alocacao_capital_pct': 20,
            'gatilho_compra_pct': 2.0,
            'meta_lucro_pct': 3.5,
            'protecao_lucro': {
                'ativacao_pct': 2.0,
                'venda_reversao_pct': 0.5
            }
        }
    }

    db = DatabaseManager(Path('dados/bot_trading.db'), Path('dados/backup'))
    position_mgr = PositionManager(db)
    gestao_cap = GestaoCapital(saldo_usdt=Decimal('100'), percentual_reserva=Decimal('8'))

    strategy = StrategySwingTrade(config_teste, position_mgr, gestao_cap)

    print("\n" + "="*60)
    print("TESTE: Strategy Swing Trade")
    print("="*60)

    stats = strategy.obter_estatisticas()
    print(f"\nEstrat√©gia: {stats['estrategia']}")
    print(f"Habilitada: {stats['habilitada']}")
    print(f"Aloca√ß√£o: {stats['alocacao_capital_pct']}%")
    print(f"Gatilho compra: {stats['gatilho_compra_pct']}%")
    print(f"Meta lucro: {stats['meta_lucro_pct']}%")
    print(f"\n‚úÖ Estrat√©gia de Giro R√°pido inicializada com sucesso!")
