#!/usr/bin/env python3
"""
Strategy Swing Trade - Estrat√©gia de Giro R√°pido (RSI + Stop Promovido)
Vers√£o 2.0 - L√≥gica de sa√≠da 100% gerenciada pelo BotWorker

IMPORTANTE:
- Esta estrat√©gia APENAS verifica entrada (RSI)
- Toda l√≥gica de sa√≠da (SL, TSL, promo√ß√£o) √© gerenciada pelo BotWorker
- O m√©todo verificar_oportunidade s√≥ retorna decis√µes de COMPRA
"""

from decimal import Decimal
from typing import Optional, Dict, Any
from pathlib import Path
import sys

# Adicionar path do projeto
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.core.position_manager import PositionManager
from src.core.gestao_capital import GestaoCapital
from src.core.analise_tecnica import AnaliseTecnica


class StrategySwingTrade:
    """
    Estrat√©gia de Swing Trade (Giro R√°pido) - Vers√£o 2.0

    Escopo REDUZIDO:
    - RESPONSABILIDADE: Apenas verificar oportunidades de COMPRA (RSI)
    - Entrada: RSI < 30 (sobrevenda)
    - Sa√≠da: 100% gerenciada pelo BotWorker
      * BotWorker ativa SL inicial ap√≥s compra
      * BotWorker promove SL ‚Üí TSL no breakeven
      * BotWorker atualiza TSL no loop principal
      * BotWorker executa vendas ao atingir stops

    Separa√ß√£o de Responsabilidades:
    - StrategySwingTrade: Decis√µes de entrada (RSI)
    - BotWorker: Gest√£o de stops, promo√ß√µes, vendas
    - PositionManager: Estado da posi√ß√£o
    - StateManager: Persist√™ncia de stops
    """

    def __init__(
        self,
        config: Dict[str, Any],
        position_manager: PositionManager,
        gestao_capital: GestaoCapital,
        analise_tecnica: AnaliseTecnica,
        logger=None,
        notifier=None,
        exchange_api=None
    ):
        """
        Inicializa a estrat√©gia de swing trade

        Args:
            config: Configura√ß√£o completa do bot
            position_manager: Gerenciador de posi√ß√µes
            gestao_capital: Gerenciador de capital
            analise_tecnica: Calculador de indicadores t√©cnicos (CR√çTICO)
            logger: Logger contextual (opcional)
            notifier: Inst√¢ncia do Notifier para notifica√ß√µes
            exchange_api: API da exchange (para logs apenas)
        """
        # Logger contextual (fallback para logger global se n√£o fornecido)
        if logger:
            self.logger = logger
        else:
            from src.utils.logger import get_loggers
            self.logger, _ = get_loggers()

        self.config = config
        self.position_manager = position_manager
        self.gestao_capital = gestao_capital
        self.analise_tecnica = analise_tecnica  # CR√çTICO: Para get_rsi()
        self.notifier = notifier
        self.exchange_api = exchange_api

        # Verifica√ß√£o de habilita√ß√£o da estrat√©gia
        self.habilitado = bool(config.get('ESTRATEGIAS', {}).get('giro_rapido', False))

        if not self.habilitado:
            return

        # Configura√ß√£o da estrat√©gia
        self.estrategia_config = config.get('estrategia_giro_rapido', {})

        # Par√¢metros de aloca√ß√£o
        self.alocacao_capital_pct = Decimal(str(self.estrategia_config.get('alocacao_capital_pct', 20)))

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # PAR√ÇMETROS DE ENTRADA (RSI)
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        self.usar_filtro_rsi_entrada = self.estrategia_config.get('usar_filtro_rsi_entrada', True)
        self.rsi_timeframe_entrada = self.estrategia_config.get('rsi_timeframe_entrada', '15m')
        self.rsi_limite_compra = Decimal(str(self.estrategia_config.get('rsi_limite_compra', 30)))

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # PAR√ÇMETROS DE SA√çDA (Gerenciados pelo BotWorker)
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        self.stop_loss_inicial_pct = Decimal(str(self.estrategia_config.get('stop_loss_inicial_pct', 2.5)))
        self.trailing_stop_distancia_pct = Decimal(str(self.estrategia_config.get('trailing_stop_distancia_pct', 0.8)))

        # Estado interno
        self.ultima_compra_timestamp: Optional[float] = None
        self.cooldown_segundos: int = self.estrategia_config.get('cooldown_compra_segundos', 60)
        self.ultima_log_status: Optional[float] = None

        # Configurar aloca√ß√£o na gest√£o de capital
        self.gestao_capital.configurar_alocacao_giro_rapido(self.alocacao_capital_pct)

        self.logger.info(f"‚úÖ StrategySwingTrade v2.0 inicializada (RSI only)")
        self.logger.info(f"   Responsabilidade: APENAS verificar entrada")
        self.logger.info(f"   RSI Entrada: {self.rsi_limite_compra}% | Timeframe: {self.rsi_timeframe_entrada}")
        self.logger.info(f"   Sa√≠da gerenciada por: BotWorker")

    def verificar_oportunidade(self, preco_atual: Decimal, tempo_atual: Optional[float] = None) -> Optional[Dict[str, Any]]:
        """
        Verifica oportunidade de COMPRA baseada em RSI

        IMPORTANTE: Este m√©todo APENAS verifica entrada.
        Nenhuma l√≥gica de venda/stop √© implementada aqui.
        O BotWorker √© 100% respons√°vel pela gest√£o de stops e sa√≠da.

        Args:
            preco_atual: Pre√ßo atual do ativo
            tempo_atual: Timestamp atual em segundos (opcional - para backtesting)

        Returns:
            Dict com dados da oportunidade de compra ou None
        """
        if not self.habilitado:
            self.logger.debug("[SwingTrade] Estrat√©gia DESABILITADA nas configura√ß√µes")
            return None

        # Verificar se j√° tem posi√ß√£o
        tem_posicao = self.position_manager.tem_posicao('giro_rapido')

        # Se J√Å tem posi√ß√£o, n√£o fazer nada (sa√≠da √© gerenciada pelo BotWorker)
        if tem_posicao:
            return None

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # SEM POSI√á√ÉO: Verificar oportunidade de COMPRA
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        # Log de estado a cada 60 segundos
        import time
        agora_timestamp = tempo_atual if tempo_atual is not None else time.time()
        if self.ultima_log_status is None or (agora_timestamp - self.ultima_log_status) >= 60:
            quantidade = self.position_manager.get_quantidade_total('giro_rapido')
            self.logger.info(
                f"üìä Giro R√°pido | Pre√ßo: ${preco_atual:.6f} | "
                f"Posi√ß√£o: {quantidade:.4f} | "
                f"Status: {'COM posi√ß√£o' if tem_posicao else 'SEM posi√ß√£o'}"
            )
            self.ultima_log_status = agora_timestamp

        # VERIFICAR COOLDOWN: Evitar m√∫ltiplas compras em sequ√™ncia r√°pida
        if self.ultima_compra_timestamp is not None:
            import time
            agora = tempo_atual if tempo_atual is not None else time.time()
            tempo_desde_ultima_compra = agora - self.ultima_compra_timestamp
            if tempo_desde_ultima_compra < self.cooldown_segundos:
                self.logger.debug(f"‚è±Ô∏è Cooldown ativo: {int(self.cooldown_segundos - tempo_desde_ultima_compra)}s restantes")
                return None

        # VERIFICAR ENTRADA: RSI < Limite
        if not self.usar_filtro_rsi_entrada:
            self.logger.debug("[SwingTrade] Filtro RSI DESABILITADO - ignorando l√≥gica de compra")
            return None

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # OBTER RSI DA AnaliseTecnica
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        par = self.config.get('par', 'ADA/USDT')
        rsi_atual = self.analise_tecnica.get_rsi(
            par=par,
            timeframe=self.rsi_timeframe_entrada,
            periodo=14,
            limite_candles=100
        )

        if rsi_atual is None:
            self.logger.debug("[SwingTrade] N√£o conseguiu obter RSI - ignorando compra")
            return None

        rsi_atual = Decimal(str(rsi_atual))

        self.logger.debug(
            f"[SwingTrade] Verificando entrada: RSI={rsi_atual:.2f}, Limite={self.rsi_limite_compra:.2f}"
        )

        # Log sobre o RSI (usando INFO para garantir visibilidade)
        self.logger.info(
            f"üìä Giro R√°pido | RSI: {rsi_atual:.2f} | "
            f"Limite: {self.rsi_limite_compra:.2f} | "
            f"Gatilho: {'SIM ‚úì' if rsi_atual < self.rsi_limite_compra else 'N√ÉO ‚úó'}"
        )

        # Verificar se RSI atingiu o gatilho
        if rsi_atual < self.rsi_limite_compra:
            self.logger.debug(f"[SwingTrade] ‚úÖ Gatilho RSI ATINGIDO!")

            # Calcular quanto comprar (100% do capital dispon√≠vel da carteira giro_rapido)
            capital_disponivel = self.gestao_capital.calcular_capital_disponivel('giro_rapido')

            self.logger.debug(f"üí∞ Giro R√°pido | Capital dispon√≠vel: ${capital_disponivel:.2f}")

            if capital_disponivel <= 0:
                self.logger.debug(
                    f"[SwingTrade] Compra BLOQUEADA. Capital dispon√≠vel: ${capital_disponivel:.2f} "
                    f"(aloca√ß√£o: {self.alocacao_capital_pct}%)"
                )
                self.logger.debug("‚ö†Ô∏è Oportunidade de compra detectada, mas SEM CAPITAL dispon√≠vel!")
                return None

            # Verificar valor m√≠nimo de ordem
            valor_minimo = Decimal(str(self.config.get('VALOR_MINIMO_ORDEM', 5.0)))
            if capital_disponivel < valor_minimo:
                self.logger.debug(
                    f"[SwingTrade] Compra BLOQUEADA. Capital ${capital_disponivel:.2f} < m√≠nimo ${valor_minimo:.2f}"
                )
                self.logger.debug(f"‚ö†Ô∏è Capital dispon√≠vel (${capital_disponivel:.2f}) abaixo do m√≠nimo (${valor_minimo:.2f})")
                return None

            # Validar com gest√£o de capital
            pode_comprar, motivo = self.gestao_capital.pode_comprar(capital_disponivel, 'giro_rapido')

            if not pode_comprar:
                self.logger.debug(f"[SwingTrade] Compra BLOQUEADA pela gest√£o de capital: {motivo}")
                self.logger.debug(f"‚ö†Ô∏è Compra bloqueada pela gest√£o de capital: {motivo}")
                if self.notifier:
                    titulo = "Compra Bloqueada (Giro R√°pido)"
                    mensagem = (
                        f"Oportunidade de compra para Giro R√°pido foi encontrada, mas n√£o executada.\n\n"
                        f"üîí **Bloqueio:** Gest√£o de Capital\n"
                        f"üìÑ **Motivo:** {motivo}"
                    )
                    self.notifier.enviar_alerta(titulo, mensagem)
                return None

            quantidade = capital_disponivel / preco_atual

            self.logger.info(f"üéØ OPORTUNIDADE DE COMPRA (Giro R√°pido)")
            self.logger.info(f"   RSI: {rsi_atual:.2f}% (limite: {self.rsi_limite_compra:.2f}%)")
            self.logger.info(f"   Pre√ßo atual: ${preco_atual:.6f}")
            self.logger.info(f"   Valor: ${capital_disponivel:.2f} ({quantidade:.4f} moedas)")
            self.logger.info(f"   üõ°Ô∏è SL Inicial ser√° ativado pelo BotWorker: {self.stop_loss_inicial_pct}%")

            return {
                'tipo': 'compra',
                'carteira': 'giro_rapido',
                'quantidade': quantidade,
                'preco_atual': preco_atual,
                'valor_operacao': capital_disponivel,
                'motivo': f'RSI {rsi_atual:.2f}% < {self.rsi_limite_compra:.2f}% - Giro R√°pido',
                'rsi_entrada': rsi_atual
            }
        else:
            # DEBUG: Log quando compra √© bloqueada
            self.logger.debug(
                f"[SwingTrade] Compra bloqueada. RSI {rsi_atual:.2f}% >= limite {self.rsi_limite_compra:.2f}%"
            )

        return None

    def registrar_compra_executada(self, oportunidade: Dict[str, Any], tempo_atual: Optional[float] = None):
        """
        Registra que uma compra foi executada

        Args:
            oportunidade: Dados da oportunidade que foi executada
            tempo_atual: Timestamp atual em segundos (opcional - para backtesting)
        """
        import time

        # Registrar timestamp da compra para ativar cooldown
        self.ultima_compra_timestamp = tempo_atual if tempo_atual is not None else time.time()

        self.logger.info(f"üìà Compra executada (Giro R√°pido)")
        self.logger.info(f"‚è±Ô∏è Cooldown ativado: pr√≥xima compra permitida em {self.cooldown_segundos}s")
        self.logger.info(f"üõ°Ô∏è BotWorker ir√° ativar SL inicial: {self.stop_loss_inicial_pct}%")

    def obter_estatisticas(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas da estrat√©gia

        Returns:
            Dict com estat√≠sticas
        """
        quantidade = self.position_manager.get_quantidade_total('giro_rapido')
        preco_medio = self.position_manager.get_preco_medio('giro_rapido')

        return {
            'estrategia': 'Giro R√°pido (RSI + Stop Promovido)',
            'versao': '2.0',
            'escopo': 'Entrada (RSI) | Sa√≠da gerenciada por BotWorker',
            'habilitada': self.habilitado,
            'quantidade_posicao': quantidade,
            'preco_medio': preco_medio,
            'alocacao_capital_pct': self.alocacao_capital_pct,
            'rsi_limite_compra': self.rsi_limite_compra,
            'rsi_timeframe': self.rsi_timeframe_entrada,
            'stop_loss_inicial_pct': self.stop_loss_inicial_pct,
            'trailing_stop_distancia_pct': self.trailing_stop_distancia_pct
        }


if __name__ == '__main__':
    """Teste b√°sico"""
    from src.persistencia.database import DatabaseManager

    # Configura√ß√£o de teste
    config_teste = {
        'DATABASE_PATH': 'dados/bot_trading.db',
        'BACKUP_DIR': 'dados/backup',
        'VALOR_MINIMO_ORDEM': 5.0,
        'par': 'ADA/USDT',
        'ESTRATEGIAS': {
            'giro_rapido': True
        },
        'estrategia_giro_rapido': {
            'habilitado': True,
            'alocacao_capital_pct': 20,
            'usar_filtro_rsi_entrada': True,
            'rsi_timeframe_entrada': '15m',
            'rsi_limite_compra': 30,
            'stop_loss_inicial_pct': 2.5,
            'trailing_stop_distancia_pct': 0.8
        }
    }

    db = DatabaseManager(Path('dados/bot_trading.db'), Path('dados/backup'))
    position_mgr = PositionManager(db)
    gestao_cap = GestaoCapital(saldo_usdt=Decimal('100'), percentual_reserva=Decimal('8'))
    analise = AnaliseTecnica(None)

    strategy = StrategySwingTrade(config_teste, position_mgr, gestao_cap, analise)

    print("\n" + "="*60)
    print("TESTE: Strategy Swing Trade v2.0")
    print("="*60)

    stats = strategy.obter_estatisticas()
    print(f"\nEstrat√©gia: {stats['estrategia']}")
    print(f"Vers√£o: {stats['versao']}")
    print(f"Escopo: {stats['escopo']}")
    print(f"Habilitada: {stats['habilitada']}")
    print(f"RSI Limite: {stats['rsi_limite_compra']}%")
    print(f"SL Inicial: {stats['stop_loss_inicial_pct']}%")
    print(f"TSL Dist√¢ncia: {stats['trailing_stop_distancia_pct']}%")
    print(f"\n‚úÖ Estrat√©gia de Giro R√°pido v2.0 inicializada com sucesso!")
