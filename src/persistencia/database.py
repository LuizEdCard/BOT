"""
M√≥dulo de persist√™ncia em banco de dados SQLite.
Gerencia todas as opera√ß√µes de armazenamento e recupera√ß√£o de dados do bot.
"""

import sqlite3
from contextlib import contextmanager
from datetime import datetime
from decimal import Decimal
from pathlib import Path
from typing import Optional, Dict, List, Any
import shutil
from src.utils.logger import get_loggers
from src.utils.conversoes import decimal_para_float

logger, _ = get_loggers()


class DatabaseManager:
    """Gerencia todas as opera√ß√µes com o banco de dados SQLite."""

    def __init__(self, db_path: Path, backup_dir: Path):
        """
        Inicializa o gerenciador de banco de dados.

        Args:
            db_path: Caminho para o arquivo do banco de dados
            backup_dir: Diret√≥rio para backups
        """
        self.db_path = db_path
        self.backup_dir = backup_dir
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # SQLite n√£o permite compartilhar conex√µes entre threads
        # Usar sempre context manager para evitar problemas de thread
        self.conn = None

        # Criar banco e tabelas se n√£o existirem
        self._criar_banco()
        logger.info(f"‚úÖ DatabaseManager inicializado: {db_path}")

    def connect(self):
        """
        DEPRECATED: Use context manager _conectar() para thread safety.
        Mantido para compatibilidade, mas n√£o recomendado.
        """
        logger.warning("‚ö†Ô∏è connect() deprecated: use context manager para thread safety")
        return sqlite3.connect(self.db_path)
    
    def close(self):
        """
        DEPRECATED: Conex√µes s√£o gerenciadas via context manager.
        """
        logger.debug("üîå close() chamado - usando context manager para conex√µes")
    
    def __del__(self):
        """
        Destrutor - nada a fazer pois usamos context manager.
        """
        pass
    
    @contextmanager
    def _conectar(self):
        """
        Context manager para conex√µes SQLite.

        Garante que a conex√£o seja fechada corretamente,
        mesmo em caso de exce√ß√£o.

        Yields:
            sqlite3.Connection: Conex√£o com o banco de dados

        Example:
            with self._conectar() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM ordens")
        """
        conn = sqlite3.connect(self.db_path)
        try:
            yield conn
            conn.commit()
        except Exception:
            conn.rollback()
            raise
        finally:
            conn.close()

    def _criar_banco(self):
        """Cria o banco de dados e todas as tabelas necess√°rias."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            # Tabela de ordens (compras e vendas)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ordens (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    tipo TEXT NOT NULL,  -- 'COMPRA' ou 'VENDA'
                    par TEXT NOT NULL,   -- 'ADA/USDT'
                    quantidade REAL NOT NULL,
                    preco REAL NOT NULL,
                    valor_total REAL NOT NULL,
                    taxa REAL NOT NULL,
                    meta TEXT,  -- 'adaptativa', 'meta1', 'meta2', 'meta3', 'degrau1', etc
                    lucro_percentual REAL,
                    lucro_usdt REAL,
                    preco_medio_antes REAL,
                    preco_medio_depois REAL,
                    saldo_ada_antes REAL,
                    saldo_ada_depois REAL,
                    saldo_usdt_antes REAL,
                    saldo_usdt_depois REAL,
                    order_id TEXT,  -- ID da ordem na Binance
                    observacao TEXT,
                    estrategia TEXT  -- 'DCA', 'SELL', 'SWING_TRADE', etc
                )
            """)

            # Tabela de saldos (snapshot peri√≥dico)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS saldos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    ada_livre REAL NOT NULL,
                    ada_bloqueado REAL NOT NULL,
                    ada_total REAL NOT NULL,
                    usdt_livre REAL NOT NULL,
                    usdt_bloqueado REAL NOT NULL,
                    usdt_total REAL NOT NULL,
                    bnb_livre REAL,
                    bnb_bloqueado REAL,
                    bnb_total REAL,
                    valor_total_usdt REAL,
                    preco_ada REAL
                )
            """)

            # Tabela de pre√ßos (hist√≥rico)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS precos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    par TEXT NOT NULL,
                    preco REAL NOT NULL,
                    sma_20 REAL,
                    sma_50 REAL
                )
            """)

            # Tabela de m√©tricas de performance
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS metricas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    total_compras INTEGER NOT NULL,
                    total_vendas INTEGER NOT NULL,
                    volume_comprado REAL NOT NULL,
                    volume_vendido REAL NOT NULL,
                    lucro_realizado REAL NOT NULL,
                    taxa_total REAL NOT NULL,
                    roi_percentual REAL,
                    maior_lucro REAL,
                    menor_lucro REAL,
                    lucro_medio REAL,
                    trades_lucrativos INTEGER,
                    trades_totais INTEGER
                )
            """)

            # Tabela de convers√µes BNB
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS conversoes_bnb (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    quantidade_bnb REAL NOT NULL,
                    valor_usdt REAL NOT NULL,
                    preco_bnb REAL NOT NULL,
                    saldo_bnb_antes REAL NOT NULL,
                    saldo_bnb_depois REAL NOT NULL,
                    saldo_usdt_antes REAL NOT NULL,
                    saldo_usdt_depois REAL NOT NULL,
                    order_id TEXT
                )
            """)

            # Tabela de estado do bot (para recupera√ß√£o)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS estado_bot (
                    id INTEGER PRIMARY KEY CHECK (id = 1),  -- Apenas 1 registro
                    timestamp_atualizacao TEXT NOT NULL,
                    preco_medio_compra REAL,
                    quantidade_total_ada REAL,
                    ultima_compra TEXT,
                    ultima_venda TEXT,
                    cooldown_ativo INTEGER DEFAULT 0,
                    bot_ativo INTEGER DEFAULT 1
                )
            """)

            # Criar √≠ndices para melhorar performance de queries
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_ordens_timestamp ON ordens(timestamp)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_ordens_tipo ON ordens(tipo)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_saldos_timestamp ON saldos(timestamp)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_precos_timestamp ON precos(timestamp)")

            # Garantir que a coluna 'order_id' existe em bancos de dados existentes
            try:
                cursor.execute("ALTER TABLE ordens ADD COLUMN order_id TEXT")
                logger.info("‚úÖ Coluna 'order_id' adicionada √† tabela 'ordens'")
            except sqlite3.OperationalError as e:
                # Coluna j√° existe
                if "duplicate column name" in str(e).lower():
                    logger.debug("Coluna 'order_id' j√° existe na tabela 'ordens'")
                else:
                    raise

            # Garantir que a coluna 'estrategia' existe em bancos de dados existentes
            try:
                cursor.execute("ALTER TABLE ordens ADD COLUMN estrategia TEXT")
                logger.info("‚úÖ Coluna 'estrategia' adicionada √† tabela 'ordens'")
            except sqlite3.OperationalError as e:
                # Coluna j√° existe
                if "duplicate column name" in str(e).lower():
                    logger.debug("Coluna 'estrategia' j√° existe na tabela 'ordens'")
                else:
                    raise

        logger.info("‚úÖ Banco de dados criado/verificado com sucesso")

    def registrar_ordem(self, dados: Dict[str, Any]) -> int:
        """
        Registra uma ordem de compra ou venda no banco.

        Args:
            dados: Dicion√°rio com os dados da ordem (deve incluir 'estrategia')

        Returns:
            ID da ordem inserida
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO ordens (
                    timestamp, tipo, par, quantidade, preco, valor_total, taxa,
                    meta, lucro_percentual, lucro_usdt,
                    preco_medio_antes, preco_medio_depois,
                    saldo_ada_antes, saldo_ada_depois,
                    saldo_usdt_antes, saldo_usdt_depois,
                    order_id, observacao, estrategia
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                dados.get('timestamp', datetime.now().isoformat()),
                dados['tipo'],
                dados['par'],
                decimal_para_float(dados['quantidade']),
                decimal_para_float(dados['preco']),
                decimal_para_float(dados['valor_total']),
                decimal_para_float(dados.get('taxa', 0)),
                dados.get('meta'),
                decimal_para_float(dados.get('lucro_percentual')),
                decimal_para_float(dados.get('lucro_usdt')),
                decimal_para_float(dados.get('preco_medio_antes')),
                decimal_para_float(dados.get('preco_medio_depois')),
                decimal_para_float(dados.get('saldo_ada_antes')),
                decimal_para_float(dados.get('saldo_ada_depois')),
                decimal_para_float(dados.get('saldo_usdt_antes')),
                decimal_para_float(dados.get('saldo_usdt_depois')),
                dados.get('order_id'),
                dados.get('observacao'),
                dados.get('estrategia')
            ))

            return cursor.lastrowid

    def registrar_saldo(self, dados: Dict[str, Any]):
        """Registra um snapshot dos saldos."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO saldos (
                    timestamp, ada_livre, ada_bloqueado, ada_total,
                    usdt_livre, usdt_bloqueado, usdt_total,
                    bnb_livre, bnb_bloqueado, bnb_total,
                    valor_total_usdt, preco_ada
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                dados.get('timestamp', datetime.now().isoformat()),
                decimal_para_float(dados['ada_livre']),
                decimal_para_float(dados['ada_bloqueado']),
                decimal_para_float(dados['ada_total']),
                decimal_para_float(dados['usdt_livre']),
                decimal_para_float(dados['usdt_bloqueado']),
                decimal_para_float(dados['usdt_total']),
                decimal_para_float(dados.get('bnb_livre', 0)),
                decimal_para_float(dados.get('bnb_bloqueado', 0)),
                decimal_para_float(dados.get('bnb_total', 0)),
                decimal_para_float(dados.get('valor_total_usdt', 0)),
                decimal_para_float(dados.get('preco_ada', 0))
            ))

    def registrar_preco(self, par: str, preco: float, sma_20: Optional[float] = None,
                       sma_50: Optional[float] = None):
        """Registra o pre√ßo atual e m√©dias m√≥veis."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO precos (timestamp, par, preco, sma_20, sma_50)
                VALUES (?, ?, ?, ?, ?)
            """, (
                datetime.now().isoformat(),
                par,
                decimal_para_float(preco),
                decimal_para_float(sma_20),
                decimal_para_float(sma_50)
            ))

    def atualizar_estado_bot(self, preco_medio: Optional[Decimal] = None,
                            quantidade: Optional[Decimal] = None,
                            cooldown_ativo: Optional[bool] = None):
        """Atualiza o estado atual do bot para recupera√ß√£o futura."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            # Verificar se j√° existe um registro de estado
            cursor.execute("SELECT id FROM estado_bot WHERE id = 1")
            existe = cursor.fetchone()

            if existe:
                # Atualizar registro existente
                updates = ["timestamp_atualizacao = ?"]
                params = [datetime.now().isoformat()]

                if preco_medio is not None:
                    updates.append("preco_medio_compra = ?")
                    params.append(decimal_para_float(preco_medio))

                if quantidade is not None:
                    updates.append("quantidade_total_ada = ?")
                    params.append(decimal_para_float(quantidade))

                if cooldown_ativo is not None:
                    updates.append("cooldown_ativo = ?")
                    params.append(1 if cooldown_ativo else 0)

                sql = f"UPDATE estado_bot SET {', '.join(updates)} WHERE id = 1"
                cursor.execute(sql, params)
            else:
                # Inserir novo registro
                cursor.execute("""
                    INSERT INTO estado_bot (
                        id, timestamp_atualizacao, preco_medio_compra,
                        quantidade_total_ada, cooldown_ativo
                    ) VALUES (1, ?, ?, ?, ?)
                """, (
                    datetime.now().isoformat(),
                    decimal_para_float(preco_medio),
                    decimal_para_float(quantidade),
                    1 if cooldown_ativo else 0
                ))

    def recuperar_estado_bot(self) -> Optional[Dict[str, Any]]:
        """Recupera o √∫ltimo estado salvo do bot."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                SELECT preco_medio_compra, quantidade_total_ada,
                       ultima_compra, ultima_venda, cooldown_ativo
                FROM estado_bot WHERE id = 1
            """)

            resultado = cursor.fetchone()

            if resultado:
                return {
                    'preco_medio_compra': Decimal(str(resultado[0])) if resultado[0] else None,
                    'quantidade_total_ada': Decimal(str(resultado[1])) if resultado[1] else None,
                    'ultima_compra': resultado[2],
                    'ultima_venda': resultado[3],
                    'cooldown_ativo': bool(resultado[4])
                }

            return None

    def calcular_metricas(self) -> Dict[str, Any]:
        """Calcula m√©tricas de performance baseadas nas ordens."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            # Total de compras e vendas
            cursor.execute("SELECT COUNT(*) FROM ordens WHERE tipo = 'COMPRA'")
            total_compras = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM ordens WHERE tipo = 'VENDA'")
            total_vendas = cursor.fetchone()[0]

            # Volume comprado e vendido
            cursor.execute("SELECT COALESCE(SUM(valor_total), 0) FROM ordens WHERE tipo = 'COMPRA'")
            volume_comprado = cursor.fetchone()[0]

            cursor.execute("SELECT COALESCE(SUM(valor_total), 0) FROM ordens WHERE tipo = 'VENDA'")
            volume_vendido = cursor.fetchone()[0]

            # Lucro realizado total
            cursor.execute("SELECT COALESCE(SUM(lucro_usdt), 0) FROM ordens WHERE tipo = 'VENDA'")
            lucro_realizado = cursor.fetchone()[0]

            # Taxas totais
            cursor.execute("SELECT COALESCE(SUM(taxa), 0) FROM ordens")
            taxa_total = cursor.fetchone()[0]

            # Estat√≠sticas de lucro
            cursor.execute("""
                SELECT
                    MAX(lucro_usdt) as maior_lucro,
                    MIN(lucro_usdt) as menor_lucro,
                    AVG(lucro_usdt) as lucro_medio,
                    COUNT(*) as trades_lucrativos
                FROM ordens
                WHERE tipo = 'VENDA' AND lucro_usdt > 0
            """)
            stats = cursor.fetchone()

            roi = (lucro_realizado / volume_comprado * 100) if volume_comprado > 0 else 0

            return {
                'total_compras': total_compras,
                'total_vendas': total_vendas,
                'volume_comprado': volume_comprado,
                'volume_vendido': volume_vendido,
                'lucro_realizado': lucro_realizado,
                'taxa_total': taxa_total,
                'roi_percentual': roi,
                'maior_lucro': stats[0] or 0,
                'menor_lucro': stats[1] or 0,
                'lucro_medio': stats[2] or 0,
                'trades_lucrativos': stats[3] or 0,
                'trades_totais': total_vendas
            }

    def salvar_metricas(self):
        """Calcula e salva as m√©tricas atuais no banco."""
        metricas = self.calcular_metricas()

        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO metricas (
                    timestamp, total_compras, total_vendas,
                    volume_comprado, volume_vendido, lucro_realizado, taxa_total,
                    roi_percentual, maior_lucro, menor_lucro, lucro_medio,
                    trades_lucrativos, trades_totais
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                datetime.now().isoformat(),
                metricas['total_compras'],
                metricas['total_vendas'],
                metricas['volume_comprado'],
                metricas['volume_vendido'],
                metricas['lucro_realizado'],
                metricas['taxa_total'],
                metricas['roi_percentual'],
                metricas['maior_lucro'],
                metricas['menor_lucro'],
                metricas['lucro_medio'],
                metricas['trades_lucrativos'],
                metricas['trades_totais']
            ))

    def obter_ultimas_ordens(self, limite: int = 10) -> List[Dict[str, Any]]:
        """Retorna as √∫ltimas N ordens."""
        with self._conectar() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            cursor.execute("""
                SELECT * FROM ordens
                ORDER BY timestamp DESC
                LIMIT ?
            """, (limite,))

            ordens = [dict(row) for row in cursor.fetchall()]

            return ordens

    def fazer_backup(self) -> str:
        """Cria um backup do banco de dados."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.backup_dir / f"trading_bot_backup_{timestamp}.db"

        shutil.copy2(self.db_path, backup_path)
        logger.info(f"üíæ Backup criado: {backup_path}")

        return str(backup_path)

    def registrar_conversao_bnb(self, dados: Dict[str, Any]):
        """Registra uma convers√£o de USDT para BNB."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO conversoes_bnb (
                    timestamp, quantidade_bnb, valor_usdt, preco_bnb,
                    saldo_bnb_antes, saldo_bnb_depois,
                    saldo_usdt_antes, saldo_usdt_depois, order_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                dados.get('timestamp', datetime.now().isoformat()),
                decimal_para_float(dados['quantidade_bnb']),
                decimal_para_float(dados['valor_usdt']),
                decimal_para_float(dados['preco_bnb']),
                decimal_para_float(dados['saldo_bnb_antes']),
                decimal_para_float(dados['saldo_bnb_depois']),
                decimal_para_float(dados['saldo_usdt_antes']),
                decimal_para_float(dados['saldo_usdt_depois']),
                dados.get('order_id')
            ))

    def ordem_ja_existe(self, order_id: str) -> bool:
        """Verifica se uma ordem j√° est√° no banco de dados."""
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("SELECT COUNT(*) FROM ordens WHERE order_id = ?", (order_id,))
            existe = cursor.fetchone()[0] > 0

            return existe

    def importar_ordens_binance(self, ordens_binance: List[Dict], recalcular_preco_medio: bool = True):
        """
        Importa ordens do hist√≥rico da Binance para o banco de dados.

        Args:
            ordens_binance: Lista de ordens da API da Binance
            recalcular_preco_medio: Se deve recalcular pre√ßo m√©dio ap√≥s importa√ß√£o

        Returns:
            Dicion√°rio com estat√≠sticas da importa√ß√£o
        """
        importadas = 0
        duplicadas = 0
        erros = 0
        
        with self._conectar() as conn:
            cursor = conn.cursor()

            for ordem in ordens_binance:
                try:
                    order_id = str(ordem.get('orderId'))

                    # Verificar se j√° existe (dentro da mesma transa√ß√£o)
                    cursor.execute("SELECT COUNT(*) FROM ordens WHERE order_id = ?", (order_id,))
                    if cursor.fetchone()[0] > 0:
                        duplicadas += 1
                        continue

                    # Extrair dados da ordem
                    timestamp = datetime.fromtimestamp(ordem['time'] / 1000).isoformat()
                    tipo = 'COMPRA' if ordem['side'] == 'BUY' else 'VENDA'
                    quantidade = float(ordem['executedQty'])

                    # Calcular pre√ßo m√©dio da ordem
                    preco = float(ordem['cummulativeQuoteQty']) / quantidade if quantidade > 0 else 0
                    valor_total = float(ordem['cummulativeQuoteQty'])

                    # Taxa (se dispon√≠vel nos fills)
                    taxa = 0
                    if 'fills' in ordem and ordem['fills']:
                        taxa = sum(float(fill.get('commission', 0)) for fill in ordem['fills'])

                    # Inserir no banco
                    cursor.execute("""
                        INSERT INTO ordens (
                            timestamp, tipo, par, quantidade, preco, valor_total, taxa,
                            order_id, observacao, estrategia
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        timestamp,
                        tipo,
                        ordem['symbol'],
                        quantidade,
                        preco,
                        valor_total,
                        taxa,
                        order_id,
                        f"Importado do hist√≥rico da Binance - Status: {ordem.get('status')}",
                        'acumulacao'  # Ordens importadas s√£o atribu√≠das √† estrat√©gia de acumula√ß√£o
                    ))

                    importadas += 1

                except Exception as e:
                    logger.error(f"Erro ao importar ordem {ordem.get('orderId')}: {e}")
                    erros += 1
        
        # Recalcular pre√ßo m√©dio DEPOIS de fechar a conex√£o anterior
        if recalcular_preco_medio and importadas > 0:
            self._recalcular_preco_medio_historico()

        return {
            'importadas': importadas,
            'duplicadas': duplicadas,
            'erros': erros,
            'total_processadas': len(ordens_binance)
        }

    def _recalcular_preco_medio_historico(self):
        """
        Recalcula o pre√ßo m√©dio de compra baseado no hist√≥rico completo.
        Atualiza o estado do bot com os valores calculados.
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            # Buscar todas as compras
            cursor.execute("""
                SELECT quantidade, preco FROM ordens
                WHERE tipo = 'COMPRA'
                ORDER BY timestamp ASC
            """)
            compras = cursor.fetchall()

            # Buscar todas as vendas
            cursor.execute("""
                SELECT quantidade FROM ordens
                WHERE tipo = 'VENDA'
                ORDER BY timestamp ASC
            """)
            vendas = cursor.fetchall()

            # Calcular total comprado
            total_comprado = sum(float(c[0]) for c in compras)
            valor_total = sum(float(c[0]) * float(c[1]) for c in compras)

            # Subtrair total vendido
            total_vendido = sum(float(v[0]) for v in vendas)
            quantidade_atual = total_comprado - total_vendido

            # Calcular pre√ßo m√©dio
            if total_comprado > 0:
                preco_medio = valor_total / total_comprado
            else:
                preco_medio = None

            # Atualizar estado do bot
            cursor.execute("""
                INSERT OR REPLACE INTO estado_bot (
                    id, timestamp_atualizacao, preco_medio_compra, quantidade_total_ada
                ) VALUES (1, ?, ?, ?)
            """, (
                datetime.now().isoformat(),
                preco_medio,
                quantidade_atual
            ))

            logger.info(f"üìä Pre√ßo m√©dio recalculado: ${preco_medio:.6f} ({quantidade_atual:.1f} ADA)")

            return {
                'preco_medio': preco_medio,
                'quantidade_atual': quantidade_atual,
                'total_comprado': total_comprado,
                'total_vendido': total_vendido
            }

    def obter_estatisticas_24h(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas das √∫ltimas 24 horas.

        Returns:
            Dicion√°rio com estat√≠sticas: compras, vendas, lucro realizado
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            # Timestamp de 24 horas atr√°s
            from datetime import timedelta
            limite_24h = (datetime.now() - timedelta(hours=24)).isoformat()

            # Total de compras nas √∫ltimas 24h
            cursor.execute("""
                SELECT COUNT(*) FROM ordens
                WHERE tipo = 'COMPRA' AND timestamp >= ?
            """, (limite_24h,))
            total_compras = cursor.fetchone()[0]

            # Total de vendas nas √∫ltimas 24h
            cursor.execute("""
                SELECT COUNT(*) FROM ordens
                WHERE tipo = 'VENDA' AND timestamp >= ?
            """, (limite_24h,))
            total_vendas = cursor.fetchone()[0]

            # Lucro realizado nas √∫ltimas 24h
            cursor.execute("""
                SELECT COALESCE(SUM(lucro_usdt), 0) FROM ordens
                WHERE tipo = 'VENDA' AND timestamp >= ?
            """, (limite_24h,))
            lucro_realizado = cursor.fetchone()[0]

            return {
                'compras': total_compras,
                'vendas': total_vendas,
                'lucro_realizado': lucro_realizado
            }

    def obter_ultima_ordem(self, tipo: str) -> Optional[Dict[str, Any]]:
        """
        Obt√©m a √∫ltima ordem de um tipo espec√≠fico (COMPRA ou VENDA).

        Args:
            tipo: 'COMPRA' ou 'VENDA'

        Returns:
            Dicion√°rio com dados da √∫ltima ordem ou None se n√£o houver
        """
        with self._conectar() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            cursor.execute("""
                SELECT * FROM ordens
                WHERE tipo = ?
                ORDER BY timestamp DESC
                LIMIT 1
            """, (tipo,))

            resultado = cursor.fetchone()

            if resultado:
                return dict(resultado)

            return None

    def obter_historico_precos(self, limite_minutos: int = 60) -> List[float]:
        """
        Obt√©m hist√≥rico de pre√ßos recente para c√°lculo de volatilidade.

        Args:
            limite_minutos: Quantos minutos de hist√≥rico buscar

        Returns:
            Lista de pre√ßos
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            from datetime import timedelta
            limite_tempo = (datetime.now() - timedelta(minutes=limite_minutos)).isoformat()

            cursor.execute("""
                SELECT preco FROM precos
                WHERE timestamp >= ?
                ORDER BY timestamp ASC
            """, (limite_tempo,))

            resultados = cursor.fetchall()

            return [float(r[0]) for r in resultados]

    def obter_timestamp_ultima_compra_degrau(self, nivel_degrau: int) -> Optional[str]:
        """
        Obt√©m o timestamp da √∫ltima compra em um degrau espec√≠fico.

        Args:
            nivel_degrau: N√≠vel do degrau (1, 2, 3, etc)

        Returns:
            Timestamp ISO da √∫ltima compra ou None se nunca comprou
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                SELECT timestamp FROM ordens
                WHERE tipo = 'COMPRA' AND meta = ?
                ORDER BY timestamp DESC
                LIMIT 1
            """, (f'degrau{nivel_degrau}',))

            resultado = cursor.fetchone()

            if resultado:
                return resultado[0]

            return None

    def obter_timestamp_ultima_compra_global(self) -> Optional[str]:
        """
        Obt√©m o timestamp da √∫ltima compra em qualquer degrau.

        Returns:
            Timestamp ISO da √∫ltima compra ou None se nunca comprou
        """
        with self._conectar() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                SELECT timestamp FROM ordens
                WHERE tipo = 'COMPRA'
                ORDER BY timestamp DESC
                LIMIT 1
            """)

            resultado = cursor.fetchone()

            if resultado:
                return resultado[0]

            return None