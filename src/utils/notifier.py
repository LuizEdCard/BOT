#!/usr/bin/env python3
"""
Notifier - Sistema de Notifica√ß√µes Proativas via Telegram
"""

import asyncio
import logging
from typing import Optional


class Notifier:
    """
    Sistema de notifica√ß√µes proativas para enviar mensagens ao usu√°rio via Telegram.

    Responsabilidades:
    - Enviar notifica√ß√µes importantes para o usu√°rio autorizado
    - Abstrair a comunica√ß√£o com o TelegramBot
    - Fornecer interface simples para os workers enviarem alertas
    """

    def __init__(self, telegram_bot, authorized_user_id: int):
        """
        Inicializa o Notifier

        Args:
            telegram_bot: Inst√¢ncia do TelegramBot
            authorized_user_id: ID do usu√°rio autorizado do Telegram
        """
        self.telegram_bot = telegram_bot
        self.authorized_user_id = authorized_user_id
        self.logger = logging.getLogger(__name__)

        self.logger.info(f"üì¢ Notifier inicializado para user_id: {authorized_user_id}")

    def enviar_notificacao(self, mensagem: str) -> bool:
        """
        Envia uma notifica√ß√£o para o usu√°rio autorizado via Telegram

        Args:
            mensagem: Texto da mensagem a ser enviada

        Returns:
            bool: True se a mensagem foi enviada com sucesso, False caso contr√°rio
        """
        try:
            if not self.telegram_bot or not self.telegram_bot.loop:
                self.logger.warning("‚ö†Ô∏è TelegramBot n√£o dispon√≠vel para envio de notifica√ß√£o")
                return False

            # Enviar mensagem de forma ass√≠ncrona
            future = asyncio.run_coroutine_threadsafe(
                self.telegram_bot.enviar_mensagem(self.authorized_user_id, mensagem),
                self.telegram_bot.loop
            )

            # Aguardar resultado (timeout de 10 segundos)
            future.result(timeout=10)

            self.logger.debug(f"üì§ Notifica√ß√£o enviada: {mensagem[:50]}...")
            return True

        except asyncio.TimeoutError:
            self.logger.error("‚ùå Timeout ao enviar notifica√ß√£o via Telegram")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar notifica√ß√£o: {e}")
            return False

    def enviar_alerta(self, titulo: str, mensagem: str) -> bool:
        """
        Envia um alerta formatado para o usu√°rio

        Args:
            titulo: T√≠tulo do alerta
            mensagem: Corpo da mensagem

        Returns:
            bool: True se enviado com sucesso
        """
        texto_formatado = f"üö® **{titulo}**\n\n{mensagem}"
        return self.enviar_notificacao(texto_formatado)

    def enviar_info(self, titulo: str, mensagem: str) -> bool:
        """
        Envia uma informa√ß√£o formatada para o usu√°rio

        Args:
            titulo: T√≠tulo da informa√ß√£o
            mensagem: Corpo da mensagem

        Returns:
            bool: True se enviado com sucesso
        """
        texto_formatado = f"‚ÑπÔ∏è **{titulo}**\n\n{mensagem}"
        return self.enviar_notificacao(texto_formatado)

    def enviar_sucesso(self, titulo: str, mensagem: str) -> bool:
        """
        Envia uma mensagem de sucesso formatada para o usu√°rio

        Args:
            titulo: T√≠tulo da mensagem
            mensagem: Corpo da mensagem

        Returns:
            bool: True se enviado com sucesso
        """
        texto_formatado = f"‚úÖ **{titulo}**\n\n{mensagem}"
        return self.enviar_notificacao(texto_formatado)


if __name__ == '__main__':
    """Exemplo de uso"""
    print("Notifier - Sistema de Notifica√ß√µes Proativas")
    print("Este m√≥dulo deve ser usado em conjunto com TelegramBot")
